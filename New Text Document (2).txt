Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset 
Project submitted by Omar Akbar Sraban 


Part 1: Yelp Dataset Profiling and Understanding

--To profile the data and find the total number of records for each of the tables, you can execute the provided SQL queries:
	
i. Attribute table = 10000
SELECT COUNT(*) AS total FROM attribute;

ii. Business table = 10000 
SELECT COUNT(*) AS total FROM business;

iii. Category table = 10000 
SELECT COUNT(*) AS total FROM category;

iv. Checkin table = 10000 
SELECT COUNT(*) AS total FROM checkin;

v. elite_years table = 10000 
SELECT COUNT(*) AS total FROM elite_years;

vi. friend table = 10000 
SELECT COUNT(*) AS total FROM friend;

vii. hours table = 10000 
SELECT COUNT(*) AS total FROM hours;

viii. photo table = 10000 
SELECT COUNT(*) AS total FROM photo;

ix. review table = 10000 
SELECT COUNT(*) AS total FROM review;

x. tip table = 10000 
SELECT COUNT(*) AS total FROM tip;

xi. user table = 10000 
SELECT COUNT(*) AS total FROM user;

--These queries will return the total number of records (rows) in each of the specified tables.


2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, 
please specify which foreign key.

i. Business = 10000
SELECT COUNT(DISTINCT id) AS total FROM business;

ii. Hours = 1562 
SELECT COUNT(DISTINCT business_id) AS total FROM hours;

iii. Category = 2643 
SELECT COUNT(DISTINCT business_id) AS total FROM category;

iv. Attribute = 1115
SELECT COUNT(DISTINCT business_id) AS total FROM attribute;

v. Review = 8090 
SELECT COUNT(DISTINCT business_id) AS total FROM review;

vi. Checkin = 493 
SELECT COUNT(DISTINCT business_id) AS total FROM checkin;

vii. Photo = 10000 
SELECT COUNT(DISTINCT id) AS total FROM photo;

viii. Tip = 537 
SELECT COUNT(DISTINCT user_id) AS total FROM tip;

ix. User = 10000 
SELECT COUNT(DISTINCT id) AS total FROM user;

x. Friend = 11 
SELECT COUNT(DISTINCT user_id) AS total FROM friend;

xi. Elite_years = 2780 
SELECT COUNT(DISTINCT user_id) AS total FROM elite_years;


3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

Answer: NO
	
	
SQL code used to arrive at the answer:

SELECT *
FROM user
WHERE id IS NOT NULL
   OR name IS NOT NULL
   OR review_count IS NOT NULL
   OR yelping_since IS NOT NULL
   OR useful IS NOT NULL
   OR cool IS NOT NULL
   OR fans IS NOT NULL
   OR average_stars IS NOT NULL
   OR compliment_hot IS NOT NULL
   OR compliment_more IS NOT NULL
   OR compliment_profile IS NOT NULL
   OR compliment_cute IS NOT NULL
   OR compliment_list IS NOT NULL
   OR compliment_note IS NOT NULL
   OR compliment_plain IS NOT NULL
   OR compliment_cool IS NOT NULL
   OR compliment_funny IS NOT NULL
   OR compliment_writer IS NOT NULL
   OR compliment_photos IS NOT NULL;

--This query selects all rows from the "user" table where at least one of the listed columns is not NULL. 
		
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

i. Table: Review, Column: Stars
	
		min: 1		max: 5		avg: 3.7082 

select 
    MIN (stars), 
    MAX (stars), 
    AVG (stars) 
from review;		
	
ii. Table: Business, Column: Stars
	
		min: 1		max: 5		avg: 3.6549 

select 
    MIN (stars), 
    MAX (stars), 
    AVG (stars) 
from business;		
	
iii. Table: Tip, Column: Likes
	
		min: 0		max: 2		avg: 0.0144 

select 
    MIN (likes), 
    MAX (likes), 
    AVG (likes) 
from tip;		
	
iv. Table: Checkin, Column: Count
	
		min: 1		max: 53		avg: 1.9414 
SELECT
    MIN(count) AS min_count,
    MAX(count) AS max_count,
    AVG(count) AS avg_count
FROM checkin;
	
	
v. Table: User, Column: Review_count
	
		min: 0 		max: 2000	avg: 24.2995 
SELECT
    MIN(review_count) AS min_review_count,
    MAX(review_count) AS max_review_count,
    AVG(review_count) AS avg_review_count
FROM user;



5. List the cities with the most reviews in descending order:

SQL code used to arrive at the answer: 
SELECT
    city,
    SUM(review_count) AS review_total
FROM business
GROUP BY city
ORDER BY review_total DESC;

	
	Result Below:

+-----------------+--------------+
| city            | review_total |
+-----------------+--------------+
| Las Vegas       |        82854 |
| Phoenix         |        34503 |
| Toronto         |        24113 |
| Scottsdale      |        20614 |
| Charlotte       |        12523 |
| Henderson       |        10871 |
| Tempe           |        10504 |
| Pittsburgh      |         9798 |
| MontrÃ©al        |         9448 |
| Chandler        |         8112 |
| Mesa            |         6875 |
| Gilbert         |         6380 |
| Cleveland       |         5593 |
| Madison         |         5265 |
| Glendale        |         4406 |
| Mississauga     |         3814 |
| Edinburgh       |         2792 |
| Peoria          |         2624 |
| North Las Vegas |         2438 |
| Markham         |         2352 |
| Champaign       |         2029 |
| Stuttgart       |         1849 |
| Surprise        |         1520 |
| Lakewood        |         1465 |
| Goodyear        |         1155 |
+-----------------+--------------+
(Output limit exceeded, 25 of 362 total rows shown)
	
	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

	SQL code used to arrive at the answer:

SELECT
    stars AS star_rating,
    COUNT(stars) AS count
FROM business
WHERE city = 'Avon'
GROUP BY stars;

	Result Below:

+-------------+-------+
| star_rating | count |
+-------------+-------+
|         1.5 |     1 |
|         2.5 |     2 |
|         3.5 |     3 |
|         4.0 |     2 |
|         4.5 |     1 |
|         5.0 |     1 |
+-------------+-------+

ii. Beachwood

	SQL code used to arrive at the answer:

SELECT
    stars AS star_rating,
    COUNT(stars) AS count
FROM business
WHERE city = 'Beachwood'
GROUP BY stars;


	Result Below:
		
+-------------+-------+
| star_rating | count |
+-------------+-------+
|         2.0 |     1 |
|         2.5 |     1 |
|         3.0 |     2 |
|         3.5 |     2 |
|         4.0 |     1 |
|         4.5 |     2 |
|         5.0 |     5 |
+-------------+-------+

7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at the answer:

SELECT name, review_count
FROM user
ORDER BY review_count DESC
LIMIT 3;
		
	Result Below:

+--------+--------------+
| name   | review_count |
+--------+--------------+
| Gerald |         2000 |
| Sara   |         1629 |
| Yuri   |         1339 |
+--------+--------------+		

8. Does posing more reviews correlate with more fans?

	Please explain your findings and interpretation of the results:
	
Based on these results, it's clear that there is a positive correlation between the average number of reviews and the average number of fans. As the "fans_range" increases from "1 - 9" to "10 - 99" to "100-1000," both the average review count and the average number of fans increase significantly.

	SQL code used to arrive at the answer:

SELECT
    CASE
        WHEN fans BETWEEN 0 AND 9 THEN '1 - 9'
        WHEN fans BETWEEN 10 AND 99 THEN '10 - 99'
        ELSE '100-1000'
    END AS fans_range,
    COUNT(*) AS num_users,
    AVG(review_count) AS average_review,
    AVG(fans) AS average_fans
FROM user
GROUP BY fans_range;

	Result Below:

+------------+-----------+----------------+----------------+
| fans_range | num_users | average_review |   average_fans |
+------------+-----------+----------------+----------------+
| 1 - 9      |      9690 |  15.0085655315 | 0.447265221878 |
| 10 - 99    |       294 |  283.326530612 |  25.5986394558 |
| 100-1000   |        16 |          891.5 |         189.75 |
+------------+-----------+----------------+----------------+

Interpretation:

--Users in the "100-1000" fans range have the highest average number of reviews (891.5) and the highest average number of fans (189.75).
--Users in the "10 - 99" fans range also have a significantly higher average review count (283.33) and a higher average number of fans (25.60) compared to users in the "1 - 9" fans range.

These findings suggest that users who write more reviews tend to have more fans. This correlation could be due to several factors. For example, users who write more reviews may have more visibility on the platform, leading to an increase in their fan base. Additionally, users who engage more with the platform by writing reviews may also be more likely to attract fans who appreciate their contributions.

9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer: There are significantly more reviews with the word "love" (1,780) than with the word "hate" (178) in them.
	
	SQL code used to arrive at the answer:
SELECT
    CASE
        WHEN LOWER(text) LIKE '%love%' THEN 'love'
        WHEN LOWER(text) LIKE '%hate%' THEN 'hate'
        ELSE NULL
    END AS reaction,
    COUNT(*) AS count
FROM review
GROUP BY reaction
ORDER BY reaction DESC;

	Result Below:

+----------+-------+
| reaction | count |
+----------+-------+
| love     |  1780 |
| hate     |   178 |
| None     |  8042 |
+----------+-------+
	
10. Find the top 10 users with the most fans:

	SQL code used to arrive at the answer:

SELECT name, fans
FROM user
ORDER BY fans DESC
LIMIT 10;
	
	Result Below:

+-----------+------+
| name      | fans |
+-----------+------+
| Amy       |  503 |
| Mimi      |  497 |
| Harald    |  311 |
| Gerald    |  253 |
| Christine |  173 |
| Lisa      |  159 |
| Cat       |  133 |
| William   |  126 |
| Fran      |  124 |
| Lissa     |  120 |
+-----------+------+
	
		

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating.

Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.

Las Vegas and Shoping

i. Do the two groups you chose to analyze have a different distribution of hours?

	SQL Code :
SELECT
    CASE
        WHEN stars >= 4.0 THEN '4-5 stars'
        WHEN stars >= 2.0 THEN '2-3 stars'
        ELSE 'under 2.0 stars'
    END AS star_rating,
    COUNT(DISTINCT a.id) AS id_count,
    COUNT(hours) AS open_day_total,
    COUNT(hours) * 1.0 / COUNT(DISTINCT a.id) AS avg_open_days
FROM business a
INNER JOIN category b ON a.id = b.business_id
INNER JOIN hours h ON b.business_id = h.business_id
WHERE a.city = 'Las Vegas' AND b.category = 'Shopping'
GROUP BY star_rating;
   

	Result :
+-------------+----------+----------------+---------------+
| star_rating | id_count | open_day_total | avg_open_days |
+-------------+----------+----------------+---------------+
| 2-3 stars   |        2 |             13 |           6.5 |
| 4-5 stars   |        2 |             12 |           6.0 |
+-------------+----------+----------------+---------------+

Based on the results, there is little difference in the distribution of hours between these two groups. Both groups have a similar average number of open days per business (6.5 for 2-3 stars and 6.0 for 4-5 stars), indicating that the businesses in both categories tend to have similar operating hours on average.

ii. Do the two groups you chose to analyze have a different number of reviews?

	SQL Code :
SELECT
    CASE
        WHEN stars >= 4.0 THEN '4-5 stars'
        WHEN stars >= 2.0 THEN '2-3 stars'
        ELSE 'under 2.0 stars'
    END AS star_rating,
    COUNT(DISTINCT a.id) AS id_count,
    SUM(a.review_count) AS total_review,
    SUM(a.review_count) * 1.0 / COUNT(DISTINCT a.id) AS avg_total_review
FROM business a
INNER JOIN category b ON a.id = b.business_id
WHERE a.city = 'Las Vegas' AND b.category = 'Shopping'
GROUP BY star_rating;
        

	Result :

+-------------+----------+--------------+------------------+
| star_rating | id_count | total_review | avg_total_review |
+-------------+----------+--------------+------------------+
| 2-3 stars   |        2 |           17 |              8.5 |
| 4-5 stars   |        2 |           36 |             18.0 |
+-------------+----------+--------------+------------------+

It appears that there is a significant difference in the number of reviews between the two groups that I analyzed. Here's the breakdown:

--For businesses with a star rating of "2-3 stars": Total Reviews: 17 Average Total Reviews per Business: 8.5
--For businesses with a star rating of "4-5 stars": Total Reviews: 36 Average Total Reviews per Business: 18.0         

iii. Are you able to infer anything from the location data provided between these two groups? Explain.

	SQL code used for analysis:

select 
case
    when stars >= 4.0 then '4-5 stars'
    when stars >= 2.0 then '2-3 stars' 
    else 'under 2.0 stars' end as star_rating,
a.neighborhood,
a.address,
a.postal_code
from business a
inner join category b
on a.id = b.business_id
where a.city ='Las Vegas' and b.category='Shopping'
group by star_rating   		
	
	Result :

+-------------+--------------+------------------------+-------------+
| star_rating | neighborhood | address                | postal_code |
+-------------+--------------+------------------------+-------------+
| 2-3 stars   | Eastside     | 3808 E Tropicana Ave   | 89121       |
| 4-5 stars   |              | 3555 W Reno Ave, Ste F | 89118       |
+-------------+--------------+------------------------+-------------+

		
2. Group business based on the ones that are open and the ones that are closed. 
What differences can you find between the ones that are still open and 
the ones that are closed? List at least two differences and the SQL code 
you used to arrive at your answer.
		
i. Difference 1: Number of Business         
ii. Difference 2: Number of Review
         
    
	SQL code used for analysis:

SELECT
    a.is_open,
    COUNT(DISTINCT a.id) AS num_business,
    COUNT(DISTINCT b.id) AS num_review,
    AVG(a.stars) AS avg_stars
FROM business a
INNER JOIN review b ON a.id = b.business_id
GROUP BY a.is_open;


	Result :

+---------+--------------+------------+---------------+
| is_open | num_business | num_review |     avg_stars |
+---------+--------------+------------+---------------+
|       0 |           61 |         71 | 3.54225352113 |
|       1 |          446 |        565 |  3.7610619469 |
+---------+--------------+------------+---------------+	
	
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or  anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started,  so feel free to be creative and come up with your own problem you want to solve. 

Provide answers, in line, to all of the following:
	
	i. Indicate the type of analysis you chose to do:

I've conducted an analysis to identify which category of businesses has the highest average reviews and average star ratings from customers, while also considering the functional status of these businesses. I've filtered for categories with more than 10 businesses for statistical significance.
         
	ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:

The data you I for your analysis includes the following key elements:

	--Category: This column categorizes businesses into different industry segments or types, such as "Local Services," "Health & Medical," "Shopping," and more. It provides the context for grouping and comparing businesses.

	--Number of Businesses (num_of_business): This column indicates the count of businesses within each category that meet the criteria of having more than 10 businesses. It helps identify the scale of businesses in each category, ensuring statistical significance.

	--Average Total Review (avg_total_review): This column represents the average total review count for businesses in each category. It reflects the overall level of customer feedback and engagement within each category.

	--Average Stars (avg_stars): This column displays the average star rating for businesses in each category. It quantifies the average customer satisfaction or sentiment towards businesses within the category.

	--Functional (functional): This column shows the percentage of functional or open businesses within each category. It provides insights into the sustainability and operational status of businesses.

I chose this data because it allows for a comparative analysis of various business categories based on customer reviews, star ratings, and operational status. By aggregating this data, I can identify trends and differences in customer sentiment and business performance across different categories, helping businesses and stakeholders make informed decisions and improvements where necessary.
                  
iii. Output of your finished dataset:

+------------------------+-----------------+------------------+-----------+------------+
| category               | num_of_business | avg_total_review | avg_stars | functional |
+------------------------+-----------------+------------------+-----------+------------+
| Local Services         |              12 |              8.3 |       4.2 |       0.83 |
| Health & Medical       |              17 |             11.9 |       4.1 |       0.94 |
| Home Services          |              16 |              5.9 |       4.0 |       0.94 |
| Shopping               |              30 |             32.6 |       4.0 |       0.83 |
| Beauty & Spas          |              13 |              9.2 |       3.9 |       0.92 |
| American (Traditional) |              11 |            102.5 |       3.8 |       0.73 |
| Food                   |              23 |             77.4 |       3.8 |       0.87 |
| Bars                   |              17 |             77.8 |       3.5 |       0.65 |
| Nightlife              |              20 |             67.6 |       3.5 |        0.6 |
| Restaurants            |              71 |             63.4 |       3.5 |       0.75 |
+------------------------+-----------------+------------------+-----------+------------+         
         
iv. Provide the SQL code you used to create your final dataset:

SELECT
    b.category,
    COUNT(a.id) AS num_of_business,
    ROUND(AVG(a.review_count), 1) AS avg_total_review,
    ROUND(AVG(a.stars), 1) AS avg_stars,
    ROUND(AVG(a.is_open), 2) AS functional
FROM business a
INNER JOIN category b ON a.id = b.business_id
GROUP BY category
HAVING num_of_business > 10
ORDER BY avg_stars DESC;

